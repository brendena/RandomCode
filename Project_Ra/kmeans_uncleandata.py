# -*- coding: utf-8 -*-
"""
Created on Thu Apr 20 15:12:32 2017

@author: jules
"""

from sklearn.cluster import KMeans
from matplotlib import pyplot
import pandas as pd

# convert string column values to a number representation of the unique string
def cleanDataframe(df, cats):
    for cat in cats:
        values = df[cat].unique()
        #print(values)
        indexes = list(range(values.size))
        #print(indexes)
        df = df.replace(values, indexes)
    return df

#base_folder = os.listdir('C:/Users/jules/Documents/Data Analytics/project ra/clean_data')
#base_files = filter(os.path.isfile, os.listdir('D:/project ra/unclean_data'))
base_file = './clean_data/cleaned_NewYorkRejections.csv'
#string_columns = ['ethnicity', 'marital_status', 'owner_type', 'gender', 'use']
interval_columns = ['age', 'bld_val', 'credit_rating', 'year_built', 'roof_age']
boolean_columns = ['computers', 'consumer_electronics', 'frequent_remodeler']
column_names = interval_columns + boolean_columns
k = 4

base_df = pd.read_csv(base_file)
#print(base_df.columns.values)

# remove 1st column
base_df.drop(labels=base_df.columns[0], axis=1, inplace=True)
# remove id column
base_df.drop('id', axis=1, inplace=True)

test_df = base_df[column_names].copy()

print("df size (rows,cols) = ", test_df.shape)
print("col names = ", test_df.columns.values)
#print(test_df)

# convert string/bool columns to numbers
#test_df = cleanDataframe(test_df, boolean_columns)
for col in boolean_columns:
    values = test_df[col].unique()
    indexes = list(range(values.size))
    test_df = test_df.replace(values, indexes)
    
# convert pandas datafram to a numpy matrix
base_matrix = test_df.as_matrix()


kmeans = KMeans(n_clusters=k).fit(base_matrix)

# array of indexes corresponding to classes around centroids, in order of the dataset
#labels = kmeans.labels_
#base_df['cluster_id'] = labels

# array of centroids generated by k-means
centroids = kmeans.cluster_centers_
print(centroids)


# print(centroids)
# print(base_df.columns)
#chosen_centroid = centroids[3]
##print(centroids[3])

#for i in range(k):
#    ds = base_matrix[np.where(labels == i)]
#    pyplot.plot(ds[:,0],ds[:,1],'o')
#    lines = pyplot.plot(centroids[i,0],centroids[i,1],'kx')
#    pyplot.setp(lines,ms=15.0)
#    pyplot.setp(lines,mew=2.0)
#pyplot.show()
